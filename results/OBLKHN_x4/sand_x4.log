2024-09-18 15:12:29,785 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.11.0+cu113
	TorchVision: 0.12.0+cu113
2024-09-18 15:12:29,785 INFO: 
  name: sandx49.18MDRN_test_X4
  model_type: SRModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  datasets:[
    test_1:[
      name: Sandstone2D
      type: PairedImageDataset
      dataroot_gt: ../datasets/RockDataSet/DeepRockSR_test/sandstone2D/sandstone2D_test_HR
      dataroot_lq: ../datasets/RockDataSet/DeepRockSR_test/sandstone2D/sandstone2D_test_LR_default_X4
      io_backend:[
        type: disk
      ]
      phase: test
      scale: 4
    ]
  ]
  network_g:[
    type: MDRN
    upscale: 4
  ]
  path:[
    pretrain_network_g: ../experiments/**sandx4MDRN/models/net_g_latest.pth
    strict_load_g: True
    results_root: /root/autodl-tmp/MDRN-main/results/sandx49.18MDRN_test_X4
    log: /root/autodl-tmp/MDRN-main/results/sandx49.18MDRN_test_X4
    visualization: /root/autodl-tmp/MDRN-main/results/sandx49.18MDRN_test_X4/visualization
  ]
  val:[
    save_img: True
    suffix: None
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: True
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 4
        test_y_channel: True
      ]
    ]
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: False

2024-09-18 15:12:29,805 INFO: Dataset [PairedImageDataset] - Sandstone2D is built.
2024-09-18 15:12:29,805 INFO: Number of test images in Sandstone2D: 400
2024-09-18 15:12:29,890 INFO: Network [MDRN] is created.
2024-09-18 15:12:35,186 INFO: Network: MDRN, with parameters: 334,486
2024-09-18 15:12:35,186 INFO: MDRN(
  (fea_conv): Conv2d(3, 56, kernel_size=(3, 3), stride=(1, 1), padding=same)
  (B1): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (B2): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (B3): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (B4): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (B5): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (B6): EADB(
    (c1_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c1_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c2_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c2_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c3_d): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1))
    (c3_r): BSConvU_rep(
      (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (dwd): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (rep1x1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (atten): Attention(
      (pointwise): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1))
      (depthwise): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (depthwise_dilated): Conv2d(56, 56, kernel_size=(5, 5), stride=(1, 1), padding=(6, 6), dilation=(3, 3), groups=56)
      (rep1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
    )
    (c4): BSConvU(
      (pw): Conv2d(56, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (dw): Conv2d(28, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=28, padding_mode=reflect)
    )
    (act): GELU()
    (c5): Conv2d(112, 56, kernel_size=(1, 1), stride=(1, 1))
    (esa): MDSA(
      (body): Sequential(
        (0): ESA(
          (conv1): Conv2d(56, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv_f): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1))
          (conv2_0): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_1): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_2): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (conv2_3): Conv2d(14, 14, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), padding_mode=reflect)
          (maxPooling_0): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_1): MaxPool2d(kernel_size=5, stride=3, padding=0, dilation=1, ceil_mode=False)
          (maxPooling_2): MaxPool2d(kernel_size=7, stride=3, padding=1, dilation=1, ceil_mode=False)
          (maxPooling_3): MaxPool2d(kernel_size=9, stride=3, padding=1, dilation=1, ceil_mode=False)
          (conv_max_0): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_1): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_2): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv_max_3): BSConvU2(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14)
            (rep1x1): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), groups=14)
          )
          (conv3_0): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_1): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_2): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv3_3): BSConvU(
            (pw): Conv2d(14, 14, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (dw): Conv2d(14, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=14, padding_mode=reflect)
          )
          (conv4): Conv2d(14, 56, kernel_size=(1, 1), stride=(1, 1))
          (sigmoid): Sigmoid()
          (GELU): GELU()
        )
      )
    )
    (cca): ECCA(
      (conv1): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), groups=56)
      (dwconv): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56)
      (GELU): GELU()
      (convd): BSConvU(
        (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
      )
      (cca): CCALayer(
        (avg_pool): AdaptiveAvgPool2d(output_size=1)
        (conv_du): Sequential(
          (0): Conv2d(56, 1, kernel_size=(1, 1), stride=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(1, 56, kernel_size=(1, 1), stride=(1, 1))
          (3): Sigmoid()
        )
      )
    )
  )
  (c1): Conv2d(336, 56, kernel_size=(1, 1), stride=(1, 1))
  (GELU): GELU()
  (c2): BSConvU(
    (pw): Conv2d(56, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (dw): Conv2d(56, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=56, padding_mode=reflect)
  )
  (upsampler): PixelShuffleDirect(
    (upsampleOneStep): UpsampleOneStep(
      (0): Conv2d(56, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=4)
    )
  )
)
2024-09-18 15:12:35,258 INFO: Loading MDRN model from ../experiments/**sandx4MDRN/models/net_g_latest.pth, with param key: [params].
2024-09-18 15:12:35,367 INFO: Model [SRModel] is created.
2024-09-18 15:12:35,367 INFO: Testing Sandstone2D...
2024-09-18 15:13:18,206 INFO: Validation Sandstone2D
	 # psnr: 30.2876	Best: 30.2876 @ sandx49.18MDRN_test_X4 iter
	 # ssim: 0.6996	Best: 0.6996 @ sandx49.18MDRN_test_X4 iter

